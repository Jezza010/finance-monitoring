openapi: 3.0.0
info:
  title: Simple Transaction API
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /api/auth/register:
    post:
      summary: Регистрация нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '400':
          description: Ошибка регистрации
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /api/auth/login:
    post:
      summary: Вход пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  username:
                    type: string
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /api/auth/logout:
    post:
      summary: Выход пользователя
      responses:
        '200':
          description: Успешный выход
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/auth/check:
    get:
      summary: Проверка сессии пользователя
      responses:
        '200':
          description: Пользователь аутентифицирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated:
                    type: boolean
                  username:
                    type: string
        '401':
          description: Не аутентифицирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated:
                    type: boolean
  /api/transaction:
    get:
      summary: Получить транзакции по фильтрам
      parameters:
        - in: query
          name: from_bank
          schema:
            type: string
          required: false
          description: Банк-отправитель
        - in: query
          name: to_bank
          schema:
            type: string
          required: false
          description: Банк-получатель
        - in: query
          name: from_date
          schema:
            type: string
            pattern: "^(0[1-9]|[12][0-9]|3[01])\\.(0[1-9]|1[0-2])\\.\\d{4}$"
          required: false
          description: Дата начала периода (включительно) в формате DD.MM.YYYY
        - in: query
          name: to_date
          schema:
            type: string
            pattern: "^(0[1-9]|[12][0-9]|3[01])\\.(0[1-9]|1[0-2])\\.\\d{4}$"
          required: false
          description: Дата конца периода (включительно) в формате DD.MM.YYYY
        - in: query
          name: status
          schema:
            type: string
          required: false
          description: Статус транзакции
        - in: query
          name: inn
          schema:
            type: string
          required: false
          description: ИНН получателя
        - in: query
          name: amount_from
          schema:
            type: number
            format: double
          required: false
          description: Минимальная сумма транзакции
        - in: query
          name: amount_to
          schema:
            type: number
            format: double
          required: false
          description: Максимальная сумма транзакции
        - in: query
          name: type
          schema:
            type: string
          required: false
          description: Тип транзакции (например, DEBET или CREDIT)
        - in: query
          name: category
          schema:
            type: string
          required: false
          description: Категория транзакции
      responses:
        '200':
          description: Список транзакций
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '500':
          $ref: '#/components/responses/ErrorResponse'
    post:
      summary: Добавить транзакцию
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /api/update_transaction:
    post:
      summary: Редактировать транзакцию
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /api/delete_transaction:
    post:
      summary: Удалить транзакцию
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /api/create_category:
    post:
      summary: Создать категорию
      parameters:
        - name: category
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /api/update_category:
    post:
      summary: Переименовать категорию
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
        - name: category
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /api/export:
    get:
      summary: Экспорт CSV
      responses:
        '200':
          description: CSV с отчётом
          content:
            text/csv:
              schema:
                type: string
                format: binary
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /api/transactions_count:
    get:
      summary: Получить динамику транзакций по интервалу
      parameters:
        - name: period
          in: query
          required: true
          schema:
            type: string
            enum:
              - W
              - M
              - Q
              - Y
      responses:
        '200':
          $ref: '#/components/responses/IntPointsResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /api/debet_count:
    get:
      summary: Получить количество дебетовых транзакций по интервалу
      parameters:
        - name: period
          in: query
          required: true
          schema:
            type: string
            enum:
              - W
              - M
              - Q
              - Y
      responses:
        '200':
          $ref: '#/components/responses/IntPointsResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /api/credit_count:
    get:
      summary: Получить количество кредитовых транзакций по интервалу
      parameters:
        - name: period
          in: query
          required: false
          schema:
            type: string
            default: "M"
            enum:
              - W
              - M
              - Q
              - Y
      responses:
        '200':
          $ref: '#/components/responses/IntPointsResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /api/sum_income:
    get:
      summary: Получить сумму всех входящих транзакций по интервалу
      parameters:
        - name: period
          in: query
          required: false
          schema:
            type: string
            default: "M"
            enum:
              - W
              - M
              - Q
              - Y
      responses:
        '200':
          $ref: '#/components/responses/FloatPointsResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /api/sum_outcome:
    get:
      summary: Получить сумму всех исходящих транзакций за по интервалу
      parameters:
        - name: period
          in: query
          required: false
          schema:
            type: string
            default: "M"
            enum:
              - W
              - M
              - Q
              - Y
      responses:
        '200':
          $ref: '#/components/responses/FloatPointsResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /api/completed_transactions:
    get:
      summary: Получить количество завершенных транзакций по интервалу
      parameters:
        - name: period
          in: query
          required: false
          schema:
            type: string
            default: "M"
            enum:
              - W
              - M
              - Q
              - Y
      responses:
        '200':
          $ref: '#/components/responses/IntPointsResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /api/cancelled_transactions:
    get:
      summary: Получить количество отмененных транзакций по интервалу
      parameters:
        - name: period
          in: query
          required: false
          schema:
            type: string
            default: "M"
            enum:
              - W
              - M
              - Q
              - Y
      responses:
        '200':
          $ref: '#/components/responses/IntPointsResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /api/bank_income_stats:
    get:
      summary: Получить статистику доходов по банку за период
      parameters:
        - name: period
          in: query
          required: false
          schema:
            type: string
            default: "M"
            enum:
              - W
              - M
              - Q
              - Y
      responses:
        '200':
          $ref: '#/components/responses/MapResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /api/bank_outcome_stats:
    get:
      summary: Получить статистику расходов по банку за период
      parameters:
        - name: period
          in: query
          required: false
          schema:
            type: string
            default: "M"
            enum:
              - W
              - M
              - Q
              - Y
      responses:
        '200':
          $ref: '#/components/responses/MapResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /api/category_stats:
    get:
      summary: Получить статистику по категориям за период
      parameters:
        - name: period
          in: query
          required: false
          schema:
            type: string
            default: "M"
            enum:
              - W
              - M
              - Q
              - Y
      responses:
        '200':
          $ref: '#/components/responses/MapResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
components:
  schemas:
    Transaction:
      type: object
      properties:
        id:
          type: integer
          example: 1
        personType:
          type: string
          description: Тип участника операции
          enum:
            - "Физическое лицо"
            - "Юридическое лицо"
          example: "Физическое лицо"
        transactionType:
          type: string
          description: Тип транзакции
          enum:
            - "Поступление"
            - "Списание"
          example: "Поступление"
        dateTime:
          type: string
          format: date-time
          example: "2025-04-23T14:00:00"
          description: Дата и время операции в ISO 8601 формате
        comment:
          type: string
          example: "Оплата товара"
        amount:
          type: number
          format: double
          example: 5000.75
        status:
          type: string
          description: Статус транзакции
          enum:
            - "Новая"
            - "Подтвержденная"
            - "В обработке"
            - "Отменена"
            - "Платеж выполнен"
            - "Платеж удален"
            - "Возврат"
          example: "Платеж выполнен"
        senderBank:
          type: string
          example: "Сбербанк"
        receiverBank:
          type: string
          example: "Тинькофф"
        receiverINN:
          type: string
          pattern: "^[0-9]{11}$"
          example: "12345678901"
          description: ИНН — только цифры, ровно 11 символов
        receiverAccountNumber:
          type: string
          example: "40817810000001234567"
        senderAccountNumber:
          type: string
          example: "40817810000001234567"
        category:
          type: string
          example: "Покупка"
        phone:
          type: string
          pattern: "^(\\+7|8)[0-9]{10}$"
          example: "+79261234567"
          description: Телефон — должен начинаться с +7 или 8 и содержать 10 цифр после
    ChartPointInt:
      type: object
      properties:
        x:
          type: string
          description: Метка по оси X (например, месяц, квартал и т.д.)
          example: "2025-Q1"
        y:
          type: integer
          format: int64
          description: Значение по оси Y (например, количество транзакций)
          example: 4521
    ChartPointFloat:
      type: object
      properties:
        x:
          type: string
          description: Метка по оси X (например, месяц, неделя и т.д.)
          example: "2025-04"
        y:
          type: number
          format: double
          description: Значение по оси Y (например, сумма транзакций)
          example: 123456.78
    Success:
      type: object
      properties:
        success:
          type: boolean
          enum: [true]
          example: true
      required:
        - success
    Error:
      type: object
      properties:
        error:
          type: string
      required:
        - error
  responses:
    SuccessResponse:
      description: Успех
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Success'
    ErrorResponse:
      description: Ошибка
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    IntPointsResponse:
      description: Массив целочисленных точек графика
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ChartPointInt'
    FloatPointsResponse:
      description: Массив вещественных точек графика
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ChartPointFloat'
    MapResponse:
      description: Мапа ключ -> вещественное число
      content:
        application/json:
          schema:
            type: object
            additionalProperties:
              type: number
              format: double
            example:
              "foo": 4.2
              "bar": 3